//  edit by xjin
//  2015
//  设计模式用例

### 类之间的关系:

~~~
泛化关系(generalization)  继承非抽象类
实现关系(realize)         继承抽象类
聚合关系(aggregation)	  整体由部分构成（不是强依赖）
组合关系(composition)     整体由部分构成(强依赖)
关联关系(association)     关联对象通常是以成员变量的形式实现的
依赖关系(dependency)
~~~



## 创建型模式：



#####简单工厂模式（Simple Factory）

简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。 



#####工厂方法模式（Factory Method）

虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic  Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。 



##### 抽象工厂模式(Abstract Factory) 

抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。 



##### 建造者模式（Builder）

造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。



单例模式（Singleton）



~~~
简单工厂模式（Simple Factory）

工厂方法模式（Factory Method）

抽象工厂模式（Abstract Factory）

建造者模式（Builder）

原型模式（Prototype）

单例模式（Singleton）

~~~



## 结构型模式

~~~

适配器模式(Adapter)

桥接模式(Bridge)

组合模式(Composite)

装饰模式(Decorator)

外观模式(Facade)

享元模式(Flyweight)

代理模式(Proxy)

~~~



## 行为型模式

~~~

职责链模式(Chain of Responsibility)

命令模式(Command)

解释器模式(Interpreter)

迭代器模式(Iterator)

中介者模式(Mediator)

备忘录模式(Memento)

观察者模式(Observer)

状态模式(State)

策略模式(Strategy)

模板方法模式(Template Method)

访问者模式(Visitor)

~~~


# #简述

- 创建型模式

|       模式名 | 描述                                                         |
| -----------: | ------------------------------------------------------------ |
| 抽象工厂模式 | 为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。 |
| 工厂方法模式 | 定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。 |
|   生成器模式 | 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。 |
| 惰性初始模式 | 推迟对象的创建、数据的计算等需要耗费较多资源的操作，只有在第一次访问的时候才执行。 |
|   对象池模式 | 通过回收利用对象避免获取和释放资源所需的昂贵成本。           |
|     原型模式 | 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。 |
|     单例模式 | 确保一个类只有一个实例，并提供对该实例的全局访问。           |

- 结构性模式

| 模式名     | 描述                                                         |
| ---------- | ------------------------------------------------------------ |
| 适配器模式 | 将某个类的接口转换成客户端期望的另一个接口表示。适配器模式可以消除由于接口不匹配所造成的类兼容性问题。 |
| 桥接模式   | 将一个抽象与实现解耦，以便两者可以独立的变化。               |
| 组合模式   | 把多个对象组成树状结构来表示局部与整体，这样用户可以一样的对待单个对象和对象的组合。 |
| 修饰模式   | 向某个对象动态地添加更多的功能。修饰模式是除类继承外另一种扩展功能的方法。 |
| 外观模式   | 为子系统中的一组接口提供一个一致的界面， 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 |
| 享元       | 通过共享以便有效的支持大量小颗粒对象。                       |
| 代理       | 为其他对象提供一个代理以控制对这个对象的访问。               |

- 行为型模式

| 模式名     | 描述                                                         |
| ---------- | ------------------------------------------------------------ |
| 黑板       | 广义的观察者在系统范围内交流信息，允许多位读者和写者。       |
| 责任链     | 为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。 |
| 命令       | 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。 |
| 解释器     | 给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。 |
| 迭代器     | 提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。 |
| 中介者     | 包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用，从而使它们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用，保证这些作用可以彼此独立的变化。 |
| 备忘录     | 备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。 |
| 空对象     | 通过提供默认对象来避免空引用。                               |
| 观察者模式 | 在对象间定义一个一对多的联系性，由此当一个对象改变了状态，所有其他相关的对象会被通知并且自动刷新。 |
| 规格       | 以布尔形式表示的可重绑定的商业逻辑。                         |
| 状态       | 让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能获取的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。 |
| 策略       | 定义一个算法的系列，将其各个分装，并且使他们有交互性。策略模式使得算法在用户使用的时候能独立的改变。 |
| 模板方法   | 模板方法模式准备一个抽象类，将部分逻辑以具体方法及具体构造子类的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先构建一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。 |
| 访问者     | 封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。 |